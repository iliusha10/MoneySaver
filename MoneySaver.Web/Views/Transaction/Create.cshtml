@model MoneySaver.Models.TransactionModel

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>TransactionModel</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.CreateDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.CreateDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CreateDate, "", new { @class = "text-danger" })

            </div>
            <div>
                <img id="date-picker" class="img-responsive" src="~/Images/calendar.png" style="width:40px;height:40px;" />
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SelectedWallet, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.SelectedWallet, Model.AllUsersWallets, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.SelectedWallet, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SelectedCategoryType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.SelectedCategoryType, Model.AllCategoriesTypes, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.SelectedCategoryType, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SelectedCategory, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.SelectedCategory, Model.AllCategories, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.SelectedCategory, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SelectedSubCategory, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.SelectedSubCategory, Model.AllSubCategories, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.SelectedSubCategory, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Value, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Value, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Value, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Comment, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Comment, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Comment, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
@section Scripts {

<script type="text/javascript">
    $(document)
        .ready(function () {
            $("#date-picker").datepicker();

            var idd = $("#SelectedCategoryType").val();
            getCategories(idd);

            $("#SelectedCategoryType").change(function () {
                var catid = $(this).val(); // Use $(this) so you don't traverse the DOM again
                getCategories(catid);
            });

            var suCatUrl = '@Url.Action("GetSubcategories", "Transaction")';
            var subcategories = $('#SelectedSubCategory');
            $("#SelectedCategory").change(function () {
                var id = $(this).val(); // Use $(this) so you don't traverse the DOM again
                $.getJSON(suCatUrl, { category: id }, function (response) {
                    subcategories.empty(); // remove any existing options
                    subcategories.append($("<option></option>")
             .attr("value", '').text('Please Select'));
                    $.each(response, function (index, key) {
                        subcategories.append($("<option></option>").attr("value", key.ID).text(key.Text))
                    });
                });
            });

            var walletUrl = '@Url.Action("GetWallets", "Transaction")';
            var wallets = $('#SelectedWallet');
            $("#SelectedWallet").click(function () {
                $.getJSON(walletUrl, function (response) {
                    wallets.empty(); // remove any existing options
                    $.each(response, function (index, key) {
                        wallets.append($("<option></option>").attr("value", key.ID).text(key.Text))
                    });
                });
            });
        });

    function getCategories(id) {
        var catUrl = '@Url.Action("GetCategories", "Transaction")';
        var categories = $('#SelectedCategory');
        $.getJSON(catUrl, { type: id }, function (response) {
            categories.empty(); // remove any existing options
            categories.append($("<option></option>")
     .attr("value", '').text('Please Select'));
            $.each(response, function (index, key) {
                categories.append($("<option></option>").attr("value", key.ID).text(key.Text))
            });
        });
    };

</script>
}
  
